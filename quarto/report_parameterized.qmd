---
params:
  df: "" #Dataframe
  shp: "" #Shapefile
  adm_level: "" #ADM Level
  adm_name: "" #ADM Name
  country_name: "" 
  year: ""
  
execute:
  echo: false
  warning: false 
  message: false 
  output: true 
  
pdf-engine: xelatex
format:
  pdf: 
    fig-width: 10
    fig-height: 8
    fig-align: "center"
    geometry: 
      - margin = 0.5in
      - bottom = 1.3in
      - top = 0.5in
mainfont: Lato

header-includes:
  - \input{_extensions/styles.tex} #contains footer
  
knitr:
  opts_chunk:
    dpi: 200
    dev: "png"
---

```{r setup, include = FALSE}
#load all packages

library(IPCpoputils)
library(popreports)
library(jsonlite)
library(geojsonsf)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(patchwork)
library(rmapshaper)
```

```{r}
#load all data

adm_level_match <- paste0("ADM",params$adm_level)
df <- fromJSON(params$df,simplifyDataFrame = TRUE)
shape_file <- geojson_sf(params$shp)
shape_file <- ms_simplify(shape_file, keep = 0.05, keep_shapes = TRUE) #reduce size
levels <- unique(df$AGE_CAT)
df$AGE_CAT <- factor(df$AGE_CAT,levels=levels)
```

```{r}
#filters data for year and ADM level if params are valid

if ((params$adm_level %in% unique(df$ADM_LEVEL)) & (params$year %in% unique(df$YR)) & (toupper(params$adm_name) %in% df[[adm_level_match]])){
  df_filtered <- df %>% filter(ADM_LEVEL == params$adm_level & SEX!='B' &
                                 YR == params$year &
                                 !!sym(adm_level_match)==toupper(params$adm_name))
} else{
  stop("ERROR: either your adm_level given or your year does not exist or your adm_name doesn't exist")
}
```

```{r,fig.height = 1}
#Side-by-side Title Text/Plot

title_text <- ggplot() +
                theme_void() +
                labs(title = paste0(params$adm_name,", ",params$country_name, " Demographics in ", params$year),
                     subtitle = "Subnational Report") +
                theme(
                  plot.title = element_text(size = 26, color = "#54278F", face = "bold", family = "Lato"),
                  plot.subtitle = element_text(size = 22, color = "#756BB1", family = "Lato")                
                  )
  
title_shp_file <- ggplot() +
                    geom_sf(data = shape_file,fill="white",color="black") +
                    geom_sf(data = shape_file[shape_file$AREA_NAME == toupper(params$adm_name), ], fill = "#54278F", color = "black") +
                    theme_void()

grid.arrange(title_text,title_shp_file,nrow=1, widths = c(3,1))
```

```{r}
# Summary Blurb at the top of the report to describe the important key statistics

blurb_result <- generate_blurb(df_filtered)

if (!is.null(blurb_result)) {
  total_pop <- blurb_result[1]
  percent_male <- blurb_result[2]
  percent_female <- blurb_result[3]
  total_less5 <- blurb_result[4]
  total_working <- blurb_result[5]
}
```
**Summary**

In `r params$year`, Tanzania's was `r total_pop`. In the demographic composition, males accounted for `r percent_male`% of the population and females `r percent_female`%. The country had a young population of `r total_less5` children under the age of 5. Meanwhile, the working-age adult population, a key driver of the nation's economy, numbered `r total_working`.

```{r}
# Population Pyramid using IPCpoputils function

pop_pyr <- plot_pyr(df_filtered, params$adm_name, '5') +
            plot_annotation(
              subtitle = "Population Pyramid",
              theme = theme(plot.subtitle = element_text(size = 22, color = "#756BB1", face = "bold", family = "Lato"))
            )

pop_pyr
```

Caption/Description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

\newpage
```{r}
# Choropleth Map using IPCpoputils function

joined_data <- join_data_to_shp(df,shape_file,adm_level_match,params$year)

pop_chlor <- plot_chlor(joined_df = joined_data,
           country = params$country_name,
           yr = params$year) +
            plot_annotation(
              subtitle = "Choropleth Map",
              theme = theme(plot.subtitle = element_text(size = 22, color = "#756BB1", face = "bold", family = "Lato"))
            )

pop_chlor
```

Caption/Description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
