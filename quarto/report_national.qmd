---
title: "`r params$country_name`: `r params$year` "
subtitle: "test test"
params:
  df: NONE
  country_name: NONE
  year: 2024
  
  
execute:
  echo: false #show/hide code output
  warning: false #suppress warnings
  message: false #suppress messages
  output: true #include output of code chunks
  cache: false
  freeze: false
  
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    link-external-newwindow: true
    embed-resources: true
  pdf: 
    toc: true
    toc-depth: 4
  
knitr:
  opts_chunk:
    fig.width: 10
    fig.height: 8
    dev: 'png'
    fig.align: 'center'
  
editor: visual
format-links: false
fig-align: left
fig-width: 15
fig-height: 5
fig-dpi: 300
---

```{r setup, include = FALSE}
#load all packages
library(IPCpoputils)
library(jsonlite)
library(dplyr)
library(knitr)
library(popreports)
```

```{r}
#load all necessary data
df <- fromJSON(params$df,simplifyDataFrame = TRUE)
levels <- unique(df$AGE_CAT)
df$AGE_CAT <- factor(df$AGE_CAT,levels=levels)
```

```{r}
# manipulate data to the provided parameters
#filters data for year
if (params$year %in% unique(df$YR) & 0 %in% unique(df$ADM_LEVEL)){
  df_filtered <- df %>% filter(YR == params$year & ADM_LEVEL == 0)
} else{
  stop("ERROR: either your adm_level given or your year does not exist or your adm_name doesn't exist")
}
```

## Summary
```{r}
# Add a blurb at the top of the report to describe the population of the selected geography with the following information: (1) total population, (2) percentage male and female, (3) total population <5 years of age, (4) total working adult population (age 15-65)

blurb_result <- generate_blurb(df_filtered)

if (!is.null(blurb_result)) {
  total_pop <- blurb_result[1]
  percent_male <- blurb_result[2]
  percent_female <- blurb_result[3]
  total_less5 <- blurb_result[4]
  total_working <- blurb_result[5]
}
```
Total Population: `r total_pop`

Percentage Male: `r percent_male`%

Percentage Female: `r percent_female`%

Total Population <5 years of age: `r total_less5`

Total Working Adult Population: `r total_working`

## National Population Pyramid
```{r}
#national population pyramid, pre-filtering data
df_national <- df_filtered %>% filter(SEX!='B')
plot_pyr(df_national, params$country_name, '5')
```
