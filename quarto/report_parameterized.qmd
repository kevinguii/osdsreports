---
title: "`r params$adm_name` in `r params$country_name`: `r params$year` "
subtitle: "Hot Report"

params:
  df: ""
  shp: ""
  adm_level: ""
  adm_name: ""
  country_name: ""
  year: ""
  
execute:
  echo: false #show/hide code output
  warning: false #suppress warnings
  message: false #suppress messages
  output: true #include output of code chunks
  
format:
  # html:
  #   toc: true
  #   toc-depth: 4
  #   toc-location: left
  #   link-external-newwindow: true
  #   embed-resources: true
  #   theme: 'minty'
  #   fontcolor: "#756BB1"
  pdf: 
    fig-width: 10
    fig-height: 8
    fig-align: "center"
    geometry: 
      - margin = 0.5in
      - bottom = 1.3in
    # include-in-header: 
    #    - "styles.tex"
    # include-before-body:
    #  - "pagestyle.tex"
    
header-includes:
  - \input{_extensions/styles.tex}
  
knitr:
  opts_chunk:
    dpi: 200
    dev: "png"
---

```{r setup, include = FALSE}
#load all packages
library(IPCpoputils)
library(jsonlite)
library(dplyr)
library(knitr)
library(popreports)
library(ggplot2)
library(png)
library(ggpubr)
library(patchwork)
library(geojsonsf)
library(jpeg)
library(grid)
library(sf)
library(tidyverse)
library(showtext); showtext_auto()
library(gridtext)
```

```{r}
#load all necessary data
adm_level_match <- paste0("ADM",params$adm_level)
df <- fromJSON(params$df,simplifyDataFrame = TRUE)
shape_file <- geojson_sf(params$shp)
levels <- unique(df$AGE_CAT)
df$AGE_CAT <- factor(df$AGE_CAT,levels=levels)
```

```{r}
# manipulate data to the provided parameters
#filters data for year and ADM level
#check to make sure valid adm_level, year, and adm_name provided
if ((params$adm_level %in% unique(df$ADM_LEVEL)) & (params$year %in% unique(df$YR)) & (toupper(params$adm_name) %in% df[[adm_level_match]])){
  df_filtered <- df %>% filter(ADM_LEVEL == params$adm_level & 
                                 YR == params$year &
                                 !!sym(adm_level_match)==toupper(params$adm_name))
} else{
  stop("ERROR: either your adm_level given or your year does not exist or your adm_name doesn't exist")
}
```

```{r}
# Add a blurb at the top of the report to describe the important key statistics

blurb_result <- generate_blurb(df_filtered)

if (!is.null(blurb_result)) {
  total_pop <- blurb_result[1]
  percent_male <- blurb_result[2]
  percent_female <- blurb_result[3]
  total_less5 <- blurb_result[4]
  total_working <- blurb_result[5]
}
```
**Summary**

Total Population: `r total_pop`

Percentage Male: `r percent_male`%

Percentage Female: `r percent_female`%

Total Population \<5 years of age: `r total_less5`

Total Working Adult Population: `r total_working`

```{r,fig.height=5,fig.align='center',fig.format='png'}
#title page shapefile graphic
ggplot() +
  geom_sf(data = shape_file,fill="white",color="black") +
  geom_sf(data = shape_file[shape_file$AREA_NAME == toupper(params$adm_name), ], fill = "#54278F", color = "black") +
  theme_void()
```

\newpage
```{r}
df_filtered_pyr <- df_filtered %>% filter(SEX != 'B')

# Create the population pyramid plot
pop_pyr <- plot_pyr(df_filtered_pyr, params$adm_name, '5') + theme_map_pyr() +
              plot_annotation(
                title=paste0(params$country_name,": ",adm_level_match),
                subtitle = "\nPopulation Pyramid",
                theme = theme(plot.title = element_text(size = 26, color = "#54278F", face = "bold", family = "Lato"),
                              plot.subtitle = element_text(size = 22, color = "#756BB1", face = "bold", family = "Lato"))
              )

pop_pyr
```

\newpage
```{r}
# Choropleth Map
joined_data <- join_data_to_shp(df,shape_file,adm_level_match,params$year)
pop_chlor <- plot_chlor(joined_df = joined_data,
           country = params$country_name,
           yr = params$year) + theme_map_chlor() +
            plot_annotation(
              title=paste0(params$country_name,": ",adm_level_match),
              subtitle = "\nChoropleth Map",
              theme = theme(plot.title = element_text(size = 26, color = "#54278F", face = "bold", family = "Lato"),
                            plot.subtitle = element_text(size = 22, color = "#756BB1", face = "bold", family = "Lato"))
            )

pop_chlor
```
